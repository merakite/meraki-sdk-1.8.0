/**
 * MerakiDashboardAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const BaseModel = require('./BaseModel');

/**
 * Creates an instance of UpdateNetworkWirelessSsid
 */
class UpdateNetworkWirelessSsid extends BaseModel {
    /**
     * @constructor
     * @param   {Object}  obj    The object passed to constructor
     */
    constructor(obj) {
        super(obj);
        if (obj === undefined || obj === null) return;
        this.name = this.constructor.getValue(obj.name);
        this.enabled = this.constructor.getValue(obj.enabled);
        this.authMode = this.constructor.getValue(obj.authMode);
        this.enterpriseAdminAccess = this.constructor.getValue(obj.enterpriseAdminAccess);
        this.encryptionMode = this.constructor.getValue(obj.encryptionMode);
        this.psk = this.constructor.getValue(obj.psk);
        this.wpaEncryptionMode = this.constructor.getValue(obj.wpaEncryptionMode);
        this.dot11w = this.constructor.getValue(obj.dot11w);
        this.dot11r = this.constructor.getValue(obj.dot11r);
        this.splashPage = this.constructor.getValue(obj.splashPage);
        this.splashGuestSponsorDomains = this.constructor.getValue(obj.splashGuestSponsorDomains);
        this.oauth = this.constructor.getValue(obj.oauth);
        this.localRadius = this.constructor.getValue(obj.localRadius);
        this.ldap = this.constructor.getValue(obj.ldap);
        this.activeDirectory = this.constructor.getValue(obj.activeDirectory);
        this.radiusServers = this.constructor.getValue(obj.radiusServers);
        this.radiusProxyEnabled = this.constructor.getValue(obj.radiusProxyEnabled);
        this.radiusTestingEnabled = this.constructor.getValue(obj.radiusTestingEnabled);
        this.radiusCalledStationId = this.constructor.getValue(obj.radiusCalledStationId);
        this.radiusAuthenticationNasId = this.constructor.getValue(obj.radiusAuthenticationNasId);
        this.radiusServerTimeout = this.constructor.getValue(obj.radiusServerTimeout);
        this.radiusServerAttemptsLimit = this.constructor.getValue(obj.radiusServerAttemptsLimit);
        this.radiusFallbackEnabled = this.constructor.getValue(obj.radiusFallbackEnabled);
        this.radiusCoaEnabled = this.constructor.getValue(obj.radiusCoaEnabled);
        this.radiusFailoverPolicy = this.constructor.getValue(obj.radiusFailoverPolicy);
        this.radiusLoadBalancingPolicy = this.constructor.getValue(obj.radiusLoadBalancingPolicy);
        this.radiusAccountingEnabled = this.constructor.getValue(obj.radiusAccountingEnabled);
        this.radiusAccountingServers = this.constructor.getValue(obj.radiusAccountingServers);
        this.radiusAccountingInterimInterval =
          this.constructor.getValue(obj.radiusAccountingInterimInterval);
        this.radiusAttributeForGroupPolicies =
          this.constructor.getValue(obj.radiusAttributeForGroupPolicies);
        this.ipAssignmentMode = this.constructor.getValue(obj.ipAssignmentMode);
        this.useVlanTagging = this.constructor.getValue(obj.useVlanTagging);
        this.concentratorNetworkId = this.constructor.getValue(obj.concentratorNetworkId);
        this.vlanId = this.constructor.getValue(obj.vlanId);
        this.defaultVlanId = this.constructor.getValue(obj.defaultVlanId);
        this.apTagsAndVlanIds = this.constructor.getValue(obj.apTagsAndVlanIds);
        this.walledGardenEnabled = this.constructor.getValue(obj.walledGardenEnabled);
        this.walledGardenRanges = this.constructor.getValue(obj.walledGardenRanges);
        this.radiusOverride = this.constructor.getValue(obj.radiusOverride);
        this.radiusGuestVlanEnabled = this.constructor.getValue(obj.radiusGuestVlanEnabled);
        this.radiusGuestVlanId = this.constructor.getValue(obj.radiusGuestVlanId);
        this.minBitrate = this.constructor.getValue(obj.minBitrate);
        this.bandSelection = this.constructor.getValue(obj.bandSelection);
        this.perClientBandwidthLimitUp = this.constructor.getValue(obj.perClientBandwidthLimitUp);
        this.perClientBandwidthLimitDown =
          this.constructor.getValue(obj.perClientBandwidthLimitDown);
        this.perSsidBandwidthLimitUp = this.constructor.getValue(obj.perSsidBandwidthLimitUp);
        this.perSsidBandwidthLimitDown = this.constructor.getValue(obj.perSsidBandwidthLimitDown);
        this.lanIsolationEnabled = this.constructor.getValue(obj.lanIsolationEnabled);
        this.visible = this.constructor.getValue(obj.visible);
        this.availableOnAllAps = this.constructor.getValue(obj.availableOnAllAps);
        this.availabilityTags = this.constructor.getValue(obj.availabilityTags);
        this.mandatoryDhcpEnabled = this.constructor.getValue(obj.mandatoryDhcpEnabled);
        this.adultContentFilteringEnabled =
          this.constructor.getValue(obj.adultContentFilteringEnabled);
        this.dnsRewrite = this.constructor.getValue(obj.dnsRewrite);
    }

    /**
     * Function containing information about the fields of this model
     * @return   {array}   Array of objects containing information about the fields
     */
    static mappingInfo() {
        return super.mappingInfo().concat([
            { name: 'name', realName: 'name' },
            { name: 'enabled', realName: 'enabled' },
            { name: 'authMode', realName: 'authMode' },
            { name: 'enterpriseAdminAccess', realName: 'enterpriseAdminAccess' },
            { name: 'encryptionMode', realName: 'encryptionMode' },
            { name: 'psk', realName: 'psk' },
            { name: 'wpaEncryptionMode', realName: 'wpaEncryptionMode' },
            { name: 'dot11w', realName: 'dot11w', type: 'Dot11w' },
            { name: 'dot11r', realName: 'dot11r', type: 'Dot11r' },
            { name: 'splashPage', realName: 'splashPage' },
            {
                name: 'splashGuestSponsorDomains',
                realName: 'splashGuestSponsorDomains',
                array: true,
            },
            { name: 'oauth', realName: 'oauth', type: 'Oauth' },
            { name: 'localRadius', realName: 'localRadius', type: 'LocalRadius' },
            { name: 'ldap', realName: 'ldap', type: 'Ldap' },
            { name: 'activeDirectory', realName: 'activeDirectory', type: 'ActiveDirectory' },
            {
                name: 'radiusServers',
                realName: 'radiusServers',
                array: true,
                type: 'RadiusServer2',
            },
            { name: 'radiusProxyEnabled', realName: 'radiusProxyEnabled' },
            { name: 'radiusTestingEnabled', realName: 'radiusTestingEnabled' },
            { name: 'radiusCalledStationId', realName: 'radiusCalledStationId' },
            { name: 'radiusAuthenticationNasId', realName: 'radiusAuthenticationNasId' },
            { name: 'radiusServerTimeout', realName: 'radiusServerTimeout' },
            { name: 'radiusServerAttemptsLimit', realName: 'radiusServerAttemptsLimit' },
            { name: 'radiusFallbackEnabled', realName: 'radiusFallbackEnabled' },
            { name: 'radiusCoaEnabled', realName: 'radiusCoaEnabled' },
            { name: 'radiusFailoverPolicy', realName: 'radiusFailoverPolicy' },
            { name: 'radiusLoadBalancingPolicy', realName: 'radiusLoadBalancingPolicy' },
            { name: 'radiusAccountingEnabled', realName: 'radiusAccountingEnabled' },
            {
                name: 'radiusAccountingServers',
                realName: 'radiusAccountingServers',
                array: true,
                type: 'RadiusAccountingServer2',
            },
            {
                name: 'radiusAccountingInterimInterval',
                realName: 'radiusAccountingInterimInterval',
            },
            {
                name: 'radiusAttributeForGroupPolicies',
                realName: 'radiusAttributeForGroupPolicies',
            },
            { name: 'ipAssignmentMode', realName: 'ipAssignmentMode' },
            { name: 'useVlanTagging', realName: 'useVlanTagging' },
            { name: 'concentratorNetworkId', realName: 'concentratorNetworkId' },
            { name: 'vlanId', realName: 'vlanId' },
            { name: 'defaultVlanId', realName: 'defaultVlanId' },
            {
                name: 'apTagsAndVlanIds',
                realName: 'apTagsAndVlanIds',
                array: true,
                type: 'ApTagsAndVlanId',
            },
            { name: 'walledGardenEnabled', realName: 'walledGardenEnabled' },
            { name: 'walledGardenRanges', realName: 'walledGardenRanges', array: true },
            { name: 'radiusOverride', realName: 'radiusOverride' },
            { name: 'radiusGuestVlanEnabled', realName: 'radiusGuestVlanEnabled' },
            { name: 'radiusGuestVlanId', realName: 'radiusGuestVlanId' },
            { name: 'minBitrate', realName: 'minBitrate' },
            { name: 'bandSelection', realName: 'bandSelection' },
            { name: 'perClientBandwidthLimitUp', realName: 'perClientBandwidthLimitUp' },
            { name: 'perClientBandwidthLimitDown', realName: 'perClientBandwidthLimitDown' },
            { name: 'perSsidBandwidthLimitUp', realName: 'perSsidBandwidthLimitUp' },
            { name: 'perSsidBandwidthLimitDown', realName: 'perSsidBandwidthLimitDown' },
            { name: 'lanIsolationEnabled', realName: 'lanIsolationEnabled' },
            { name: 'visible', realName: 'visible' },
            { name: 'availableOnAllAps', realName: 'availableOnAllAps' },
            { name: 'availabilityTags', realName: 'availabilityTags', array: true },
            { name: 'mandatoryDhcpEnabled', realName: 'mandatoryDhcpEnabled' },
            { name: 'adultContentFilteringEnabled', realName: 'adultContentFilteringEnabled' },
            { name: 'dnsRewrite', realName: 'dnsRewrite', type: 'DnsRewrite' },
        ]);
    }

    /**
     * Function containing information about discriminator values
     * mapped with their corresponding model class names
     *
     * @return   {object}  Object containing Key-Value pairs mapping discriminator
     *                     values with their corresponding model classes
     */
    static discriminatorMap() {
        return {};
    }
}

module.exports = UpdateNetworkWirelessSsid;
