/**
 * MerakiDashboardAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const BaseModel = require('./BaseModel');

/**
 * Creates an instance of Products
 */
class Products extends BaseModel {
    /**
     * @constructor
     * @param   {Object}  obj    The object passed to constructor
     */
    constructor(obj) {
        super(obj);
        if (obj === undefined || obj === null) return;
        this.wireless = this.constructor.getValue(obj.wireless);
        this.switch = this.constructor.getValue(obj.switch);
        this.appliance = this.constructor.getValue(obj.appliance);
        this.camera = this.constructor.getValue(obj.camera);
        this.vmxHost = this.constructor.getValue(obj.vmxHost);
        this.environmental = this.constructor.getValue(obj.environmental);
        this.cellularGateway = this.constructor.getValue(obj.cellularGateway);
    }

    /**
     * Function containing information about the fields of this model
     * @return   {array}   Array of objects containing information about the fields
     */
    static mappingInfo() {
        return super.mappingInfo().concat([
            { name: 'wireless', realName: 'wireless', type: 'Wireless' },
            { name: 'switch', realName: 'switch', type: 'Switch' },
            { name: 'appliance', realName: 'appliance', type: 'Appliance' },
            { name: 'camera', realName: 'camera', type: 'Camera' },
            { name: 'vmxHost', realName: 'vmxHost', type: 'VmxHost' },
            { name: 'environmental', realName: 'environmental', type: 'Environmental' },
            { name: 'cellularGateway', realName: 'cellularGateway', type: 'CellularGateway' },
        ]);
    }

    /**
     * Function containing information about discriminator values
     * mapped with their corresponding model class names
     *
     * @return   {object}  Object containing Key-Value pairs mapping discriminator
     *                     values with their corresponding model classes
     */
    static discriminatorMap() {
        return {};
    }
}

module.exports = Products;
